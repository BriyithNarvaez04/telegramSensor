#include <esp_now.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

const char* ssid = "";
const char* password = "";

// Initialize Telegram BOT
#define BOTtoken ""  // Bot Token (Get from Botfather)
#define CHAT_ID ""  // Chat ID (puedes obtenerlo con @myidbot en Telegram)

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

// Estructura para recibir datos
typedef struct struct_message {
  int id;
  float temp;
  float hum;
  float light;
} struct_message;

struct_message incomingReadings;
struct_message message_tel;

bool sendTemp = false;
bool sendHum = false;
bool sendLight = false;

// Umbrales
const float TEMP_MIN = 24;
const float TEMP_MAX = 35;

const float HUM_MIN = 40;
const float HUM_MAX = 70;

const float LIGHT_MIN = 2000;

// Callback de recepci√≥n de datos
void OnDataRecv(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
  char macStr[18];
  const uint8_t *mac_addr = info->src_addr;

  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print("Paquete recibido de: ");
  Serial.println(macStr);

  memcpy(&incomingReadings, incomingData, sizeof(incomingReadings));

  Serial.printf("Board ID: %d\n", incomingReadings.id);

  if (incomingReadings.id == 1) {  // Temperatura
    Serial.printf("Temperatura: %.2f ¬∞C\n", incomingReadings.temp);

    if (incomingReadings.temp < TEMP_MIN || incomingReadings.temp > TEMP_MAX) {
      message_tel.temp = incomingReadings.temp;
      sendTemp = true;
    }
  }

  if (incomingReadings.id == 2) {  // Humedad
    Serial.printf("Humedad: %.2f %%\n", incomingReadings.hum);
  
    if (incomingReadings.hum < HUM_MIN || incomingReadings.hum > HUM_MAX) {
      message_tel.hum = incomingReadings.hum;
      sendHum = true;
    }
  }

  if (incomingReadings.id == 3) {  // Luz
    Serial.printf("Luz: %.2f\n", incomingReadings.light);
    if (incomingReadings.light >= LIGHT_MIN ) {
      message_tel.light = incomingReadings.light;
      sendLight = true;
    }
  }
}

void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  #ifdef ESP32
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  #endif

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  bot.sendMessage(CHAT_ID, "ü§ñ Bot iniciado correctamente", "");

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error inicializando ESP-NOW");
    return;
  }

  esp_now_register_recv_cb(OnDataRecv);
}

void loop() {



  if (sendTemp) {
    bot.sendMessage(CHAT_ID, "‚ö†Ô∏è Alerta: Temperatura fuera de rango: " + String(message_tel.temp, 2) + " ¬∞C", "");
    sendTemp = false;
  }
  if (sendHum) {
    bot.sendMessage(CHAT_ID, "‚ö†Ô∏è Alerta: Humedad fuera de rango: " + String(message_tel.hum, 2) + " %", "");
    sendHum = false;
  }
  if (sendLight) {
    bot.sendMessage(CHAT_ID, "‚ö†Ô∏è Alerta: Nivel de luz fuera de rango: " + String(message_tel.light, 2), "");
    sendLight = false;
  }
}
