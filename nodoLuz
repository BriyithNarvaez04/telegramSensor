#include <esp_now.h>
#include <esp_wifi.h>
#include <WiFi.h>

// Set your Board ID
#define BOARD_ID 3

// Pin analógico donde está conectado el sensor de luz (LDR o similar)
#define LIGHT_SENSOR_PIN 34  // Puedes cambiarlo según tu conexión

// MAC Address del receptor
uint8_t broadcastAddress[] = {0xB8, 0xD6, 0x1A, 0x42, 0x4E, 0x58};

// Estructura de datos que se envía
typedef struct struct_message {
  int id;
  float temp;
  float hum;
  float light;
} struct_message;

esp_now_peer_info_t peerInfo;
struct_message myData;

unsigned long previousMillis = 0;
const long interval = 10000;  // cada 10 segundos

constexpr char WIFI_SSID[] = "TP-LINK_DDAE";

// Obtener canal WiFi del SSID
int32_t getWiFiChannel(const char *ssid) {
  if (int32_t n = WiFi.scanNetworks()) {
    for (uint8_t i = 0; i < n; i++) {
      if (!strcmp(ssid, WiFi.SSID(i).c_str())) {
        return WiFi.channel(i);
      }
    }
  }
  return 0;
}

// Leer sensor de luz
int readLightSensor() {
  int value = analogRead(LIGHT_SENSOR_PIN);
  Serial.print("Luz: ");
  Serial.println(value);
  return value;
}

// Callback de envío
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nEstado del último envío:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Envío exitoso" : "Fallo en el envío");
}

void setup() {
  Serial.begin(115200);

  // Configurar como estación WiFi y fijar canal
  WiFi.mode(WIFI_STA);
  int32_t channel = getWiFiChannel(WIFI_SSID);
  esp_wifi_set_promiscuous(true);
  esp_wifi_set_channel(channel, WIFI_SECOND_CHAN_NONE);
  esp_wifi_set_promiscuous(false);

  // Inicializar ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error inicializando ESP-NOW");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Error al agregar peer");
    return;
  }
}

void loop() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Preparar datos
    myData.id = BOARD_ID;

    myData.temp = 0;
    myData.hum = 0;
    myData.light = readLightSensor();


    // Enviar datos
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));
    if (result == ESP_OK) {
      Serial.println("Enviado con éxito");
    } else {
      Serial.println("Error al enviar los datos");
    }
  }
}
